// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.

#include "Common.cfi"
#include "ShadeLib.cfi"

// Shader global descriptions
float Script : STANDARDSGLOBAL
<
  string Script =
           "ShaderDrawType = Custom;"
           "ShaderType = FX;"
           "LocalConstants;"
           "PreprType = GenerateClouds;"
>;

/// Un-Tweakables //////////////////////
float4x4 CompMatrix  : PI_Composite < vsregister = c0; >;;    // View*Projection
float4 CameraFrontVector : PB_CameraFront;

float4 LightningPos;
float4 LightningColSize;

float4 ImposterCameraPos;
float4 ImposterCameraFront;
float4 ImposterCameraUp;
float4 vCloudWSPos;					// VS constant
float4 g_CloudColorScale;		// PS constant, .x=Final Cloud Color Multiplier

float4 RTRect : PB_RTRect;

float4 vClearColor;
float4 vClearRect;
float4 vClearDepth;

sampler2D baseMap : register(s0);
sampler2D depthMap : register(s1); // TODO: remove from C++ code
sampler2D hdrMap : register(s2);

sampler2D imposterMap
<
  string Script =
      "RenderOrder=PreProcess;";
>;

float4 ScreenSize  : PB_ScreenSize;

struct pixout_clouds
{
  half4 Color  : COLOR0;
};

struct pixout_clear
{
  float4 Color0  : SV_Target0;
  float4 Color1  : SV_Target1;
  float4 Color2  : SV_Target2;
  float4 Color3  : SV_Target3;
};

struct app2vertCS
{
  IN_P
  IN_TBASE
  float3 viewDir : TEXCOORD1;
};

struct vert2frag
{
  float4 HPosition  : POSITION;
  float2 baseTC     : TEXCOORD0_centroid;
  float3 vCamToPixel : TEXCOORD1;
  float3 vCamPosDiff : TEXCOORD2;
  float3 ImposterCameraFront : TEXCOORD3;
  float3 ImposterCameraUp : TEXCOORD4;
  float4 NearFar     : TEXCOORD5;
};

struct vert2fragImp
{
  float4 HPosition  : POSITION;
  float2 baseTC     : TEXCOORD0_centroid;
  float3 posTC      : TEXCOORD1;  
  float  distOpac   : TEXCOORD2_centroid;
  
  float4 hPosTexProj : TEXCOORD3;
  float4 Color       : COLOR0;
  float3 Lightning	 : TEXCOORD4;
};

struct vert2fragCSImp
{
  float4 HPosition  : POSITION;
  float2 baseTC     : TEXCOORDN;
  float4 viewDir    : TEXCOORDN;
  float4 fogColor   : TEXCOORDN;
  float2 sceneDepthTC : TEXCOORDN;
  float  linearDepth : TEXCOORDN;
  float3 Lightning	 : TEXCOORDN;
  float4 NearFar     : TEXCOORDN; 
};

struct app2vertCloud
{
  IN_P
  IN_TBASE
  IN_C0
};

struct vert2fragCloud
{
  float4 HPosition  : POSITION;
  OUT_C0
  float2 baseTC     : TEXCOORD0;
};

struct vert2fragClear
{
  float4 HPosition  : POSITION;
  OUT_C0
  float2 baseTC     : TEXCOORD0;

	MSAA_SAMPLE_INDEX_PS
};

struct pixout2
{
  float4 Color  : COLOR0;
  float  Depth  : DEPTH;
};

vert2frag ImposterVS(app2vertCloud IN)
{
	vert2frag OUT = (vert2frag)0; 

	// Position in screen space.
	float4 vPos = IN.Position;
	OUT.HPosition = mul(CompMatrix, vPos);
	OUT.NearFar = g_VS_NearFarClipDist;

	OUT.baseTC.xy = IN.baseTC.xy;

	return OUT;
}

vert2fragClear TransformedClearVS(app2vertCloud IN)
{
  vert2fragClear OUT = (vert2fragClear)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = float4(2.0f * (vPos.xy + 0.5f) / IN.baseTC.xy - 1.0f, vPos.zw);
  OUT.baseTC = IN.baseTC;
  
  OUT.Color = GetInputColor(IN.Color);

  return OUT;
}

float4 ClearVS(float3 inPosition  : POSITION) : SV_Position
{
  float2 clipPos = inPosition.xy * vClearRect.xy + vClearRect.zw;
  return float4(clipPos, vClearDepth.x, 1.0);
}

pixout_clear ClearPS()
{
  pixout_clear OUT;
  
  OUT.Color0 = vClearColor;
  OUT.Color1 = vClearColor;
  OUT.Color2 = vClearColor;
  OUT.Color3 = vClearColor;
  
  return OUT;
}

pixout ClearUniformPS(vert2fragClear IN)
{
  pixout OUT;

  OUT.Color = vClearColor.xyzw;

  return OUT;
}

vert2fragCloud TransformCloudVS(app2vertCloud IN)
{
  vert2fragCloud OUT = (vert2fragCloud)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = mul(CompMatrix, vPos);
  
  OUT.baseTC.xy = IN.baseTC.xy;
  OUT.Color = GetInputColor(IN.Color);
  
  // Fade out at near clipping plane.
  // Zero opacity at near clipping plane AND "full opacity" when >= 1 meter away from near clipping plane
  //OUT.Color *= smoothstep( OUT.HPosition.w - g_VS_NearFarClipDist.x, 0.0, 1.0 ); 

  return OUT;
}

vert2fragImp TransformImposterVS(app2vertCloud IN)
{
  vert2fragImp OUT = (vert2fragImp)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = mul(CompMatrix, vPos);
  
  OUT.baseTC.xy = (IN.baseTC.xy * RTRect.zw) + RTRect.xy;
  OUT.posTC.xyz = vPos.xyz;  
  
  // DO NOT SATURATE!!! We need per-pixel zero opacity at the far distance clipping plane
  //OUT.distOpac = 1 - pow( saturate( OUT.HPosition.w * g_VS_NearFarClipDist.w ), 10 );  
  OUT.distOpac = 1 - pow( OUT.HPosition.w * g_VS_NearFarClipDist.w, 10 ); 

  OUT.hPosTexProj = HPosToScreenTC(OUT.HPosition);

  OUT.Color = GetInputColor(IN.Color);
  
  // Fade out at near clipping plane.
  // Zero opacity at near clipping plane AND "full opacity" when >= 1 meter away from near clipping plane
  //OUT.Color *= smoothstep( OUT.HPosition.w - g_VS_NearFarClipDist.x, 0.0, 1.0 ); 
       
  float3 attenDist = 0.05 * LightningColSize.w * ( vPos.xyz - LightningPos.xyz );
  float lightning = 1 / ( 1 + dot( attenDist, attenDist ) );
  OUT.Lightning = LightningColSize.xyz * lightning;

  return OUT;
}

vert2fragCSImp TransformCSImposterVS(app2vertCS IN)
{
  vert2fragCSImp OUT = (vert2fragCSImp)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = mul(CompMatrix, vPos);
  OUT.baseTC.xy = (IN.baseTC.xy * RTRect.zw) + RTRect.xy;
  OUT.viewDir.xyz = IN.viewDir.xyz;
#if !%_RT_VOLUMETRIC_FOG
  OUT.fogColor = GetVolumetricFogColor( vCloudWSPos.xyz );
#else
	OUT.fogColor = GetVolumetricFogAnalyticalColorByWorldPos( vCloudWSPos.xyz );
#endif
  OUT.viewDir.a = LightningPos.a;

	#define zNear		g_VS_NearFarClipDist.x
	#define zFar		g_VS_NearFarClipDist.y
	#define zPersp	OUT.HPosition.z
	
	OUT.NearFar = g_VS_NearFarClipDist;

	float a = zFar / ( zFar - zNear );
	float b = zNear * -a;
	float zLinear = b / ( zPersp - a );
  
  OUT.sceneDepthTC = HPosToScreenTC(OUT.HPosition);
  //OUT.sceneDepthTC.xy = IN.baseTC.xy; // copying input texture uv's doesn't work with high res screenshot option...
  //OUT.sceneDepthTC.x = (  OUT.HPosition.x + OUT.HPosition.w ) * 0.5; // ... instead, map to screen using homogenous position and perform clamped texture lookup
  //OUT.sceneDepthTC.y = ( -OUT.HPosition.y + OUT.HPosition.w ) * 0.5;
  //OUT.sceneDepthTC.xy += 0.5 * OUT.HPosition.w;  // no need to add half a texel since we're drawing a full screen quad
  //OUT.sceneDepthTC.xy /= OUT.HPosition.w; // no need for perspective divide as w=1, always
    
  OUT.linearDepth = zLinear;
  
  float3 attenDist = 0.05 * LightningColSize.w * ( vfViewPos.xyz - LightningPos.xyz );
  float lightning = 1 / ( 1 + dot( attenDist, attenDist ) );
  OUT.Lightning = LightningColSize.xyz * lightning;
  
  return OUT;
}

pixout ImposterPS(vert2frag IN)
{
  pixout OUT;

  half4 vTex = GetTexture2D(imposterMap, IN.baseTC.xy);
  half4 vDepth = GetLinearDepth(depthMap, IN.baseTC.xy);
  float fDepth = lerp(PS_ZRange.x, PS_ZRange.y, vTex.a);
  OUT.Color = vTex;
  float fLinearZ = (PS_ZRange.w / (fDepth - PS_ZRange.z)) * IN.NearFar.w;
//  OUT.Color1 = (vDepth.a == 0) ? 1 : max(fLinearZ, 0.0001);
//  OUT.Depth  = (vDepth.a == 0) ? 1 : fDepth;

  return OUT;
}

pixout_clouds CloudPS(vert2fragCloud IN)
{
  pixout_clouds OUT;

  half4 vTex = GetTexture2D(baseMap, IN.baseTC.xy); 
  OUT.Color =  half4( vTex.xyz * IN.Color.xyz, vTex.w ) * IN.Color.w;

  return OUT;
}

float CloudAngularAtten
<
  register = REG_PM_PARAM_0.x;
  string UIHelp = "Angular attenuation factor for cloud back lighting";                     
  string UIName = "CloudAngularAtten";    
  
  string UIWidget = "slider";
  float UIMin = 1.0;
  float UIMax = 100.0;
  float UIStep = 0.25;
> = 30.0;

float CloudOutlineThreshold
<
  register = REG_PM_PARAM_0.y;
  string UIHelp = "Opacity threshold to generate cloud outline for back lighting";                     
  string UIName = "CloudOutlineThreshold";    
  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.01;
> = 0.4;

float CloudOutlineSlope
<
  register = REG_PM_PARAM_0.z;
  string UIHelp = "Slope to generate cloud outline for back lighting";                     
  string UIName = "CloudOutlineSlope";    
  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 20.0;
  float UIStep = 0.1;
> = 1.0;

float CloudBacklightingScale
<
  register = REG_PM_PARAM_0.w;
  string UIHelp = "Scale back lighting result";                     
  string UIName = "CloudBacklightingScale";    
  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.1;
> = 1.0;

half3 ApplyBackLighting( in half4 cloudColor, in half3 viewDir )
{
/*
  half mask = ( 1.1 - 0.9 * cloudColor.w );  
  float spec = pow( saturate( dot( normalize( viewDir  ), g_PS_SunLightDir.xyz ) ), CloudAngularAtten );  
  half3 col = cloudColor.xyz + 1.5 * cloudColor.w * mask * mask * spec * g_PS_SunColor; 
*/
	half arg = 0.5 + ( -cloudColor.w + CloudOutlineThreshold ) * CloudOutlineSlope;
  half mask = saturate( arg );    
  float spec = CloudBacklightingScale * pow( saturate( dot( normalize( viewDir  ), g_PS_SunLightDir.xyz ) ), CloudAngularAtten );  
  half3 col = cloudColor.xyz + cloudColor.w * mask * spec * g_PS_SunColor.xyz; 
  //half3 col = mask; 

	return( col );
}

float HDRBrightnessAdjust
<
  register = REG_PM_PARAM_1.x;
  string UIHelp = "Controls brightness of clouds on HDR (relative to LDR)";
  string UIName = "HDRBrightnessAdjust";
  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 5.0;
  float UIStep = 0.1;
> = 1.0;

pixout CloudImposterPS(vert2fragImp IN)
{
  pixout OUT;

 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   DebugOutput(OUT.Color, float4(IN.baseTC.xy, 0, 0));
   return OUT;
 #endif

  half4 vTex = GetTexture2D(baseMap, IN.baseTC.xy) * saturate( IN.distOpac );
#if !%_RT_VOLUMETRIC_FOG
  half4 vFog = GetVolumetricFogColor(IN.posTC);
#else
	half4 vFog = GetVolumetricFogAnalyticalColorByWorldPos(IN.posTC);
#endif
  half alpha = vTex.w;
  half3 vFinalCol = ApplyBackLighting( vTex, IN.posTC - vfViewPos.xyz );

	vFinalCol.xyz *= g_CloudColorScale.x;		// needed for HDR
	vFinalCol.xyz += IN.Lightning.xyz * alpha;
		

#if %_RT_VOLUMETRIC_FOG
	half4 vRes = half4( vFinalCol.xyz, alpha );

	VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenProj(IN.hPosTexProj);
	float4 vf = GetVolumetricFogValue(vtc);
	vFog.xyz *= alpha;
	vf.xyz *= alpha;
	ApplyVolumetricFog(vf, vFog, vtc, vRes.rgb);

	float sceneDepth = GetLinearDepthScaledProj( sceneLinearDepthTex, IN.hPosTexProj );
	float scale = saturate( ( sceneDepth - IN.hPosTexProj.w ) * 0.05 );
	vRes *= scale * IN.Color.a;
#else
  half4 vRes = half4( lerp( vFog.xyz * alpha, vFinalCol.xyz, vFog.w ).xyz, alpha );    
	vRes.xyz = lerp( AvgFogVolumeContrib.xyz * vRes.w, vRes.xyz, AvgFogVolumeContrib.w );			  

	float sceneDepth = GetLinearDepthScaledProj( sceneLinearDepthTex, IN.hPosTexProj );
	float scale = saturate( ( sceneDepth - IN.hPosTexProj.w ) * 0.05 );
	vRes *= scale * IN.Color.a;
#endif
	
  HDROutput( OUT, vRes, 1);   
  
  return OUT;
}

pixout Cloud_RecursivePS(vert2fragImp IN)
{
  pixout OUT;

  half4 vTex = GetTexture2D(baseMap, IN.baseTC.xy) * saturate( IN.distOpac );
#if !%_RT_VOLUMETRIC_FOG
  half4 vFog = GetVolumetricFogColor(IN.posTC);
#else
	half4 vFog = GetVolumetricFogAnalyticalColorByWorldPos(IN.posTC, true);
#endif
  half3 vFinalCol = vTex.xyz * IN.Color.xyz * IN.Color.w;
	vFinalCol.xyz *= g_CloudColorScale.x;		// needed for HDR
  half alpha = vTex.w * IN.Color.w;

#if !%_RT_VOLUMETRIC_FOG
  half4 vRes = half4( lerp( vFog.xyz * alpha, vFinalCol.xyz, vFog.w ).xyz, alpha );
#else
	half4 vRes = half4( vFinalCol.xyz, alpha );
	ApplyVolumetricFogAnalytical(vFog, vRes.xyz);
	vRes.xyz *= alpha;
#endif

  HDROutput( OUT, vRes, 1);
  return OUT;
}

pixout CloudScreenImposterPS(vert2fragCSImp IN)
{
  pixout OUT;

 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   DebugOutput(OUT.Color, float4(IN.baseTC.xy, 0, 0));
   return OUT;
 #endif

  half4 vTex = GetTexture2D(baseMap, IN.baseTC.xy);
  half4 vFog = IN.fogColor;	
	half alpha = vTex.w;	
	half3 color = ApplyBackLighting( vTex, IN.viewDir.xyz );
	
	color.xyz *= g_CloudColorScale.x;		// needed for HDR
	color.xyz += IN.Lightning.xyz * alpha;	

#if %_RT_VOLUMETRIC_FOG
	half4 finalColor = half4( color.xyz, alpha );
	float sceneDepth = GetLinearDepth( sceneLinearDepthTex, IN.sceneDepthTC.xy );
	float scale = saturate( ( sceneDepth * IN.NearFar.y - IN.linearDepth ) * 0.05 );
	float linearDepth = max( IN.linearDepth, sceneDepth * IN.NearFar.y );
	VolumetricFogTexcoord vtc = GetVolumetricFogTexcoordParamByScreenTexcoordAndDepth(IN.sceneDepthTC.xy, linearDepth);
	float4 vf = GetVolumetricFogValue(vtc);
	vFog.xyz *= alpha;
	vf.xyz *= alpha;
	ApplyVolumetricFog(vf, vFog, vtc, finalColor.rgb);

	finalColor *= scale * IN.viewDir.a;
#else
	half4 finalColor = half4( lerp( vFog.xyz * alpha, color.xyz, vFog.w ).xyz, alpha );
	finalColor.xyz = lerp( AvgFogVolumeContrib.xyz * alpha, finalColor.xyz, AvgFogVolumeContrib.w );
	float sceneDepth = GetLinearDepth( sceneLinearDepthTex, IN.sceneDepthTC.xy );
	float scale = saturate( ( sceneDepth * IN.NearFar.y - IN.linearDepth ) * 0.05 );
	finalColor *= scale * IN.viewDir.a;
#endif

	HDROutput( OUT, finalColor, 1 );
  return OUT;
}

vert2frag ImposterPostVS(app2vertCloud IN)
{
  vert2frag OUT = (vert2frag)0; 

  // Position in screen space.
  float4 vPos = IN.Position;
  OUT.HPosition = mul(CompMatrix, vPos);
  
  OUT.baseTC.xy = IN.baseTC.xy; // + PixelOffset.xy * 0.5;

  return OUT;
}

pixout_clouds ImposterPostPS(vert2frag IN)
{
  pixout_clouds OUT;

 #if %_RT_DEBUG0 || %_RT_DEBUG1 || %_RT_DEBUG2 || %_RT_DEBUG3
   DebugOutput(OUT.Color, float4(IN.baseTC.xy, 0, 0));
   return OUT;
 #endif

  half4 vTex = GetTexture2D(baseMap, IN.baseTC.xy);
  half4 vDepth = GetLinearDepth( sceneLinearDepthTex, IN.baseTC.xy );
  OUT.Color.xyz = vTex.xyz;
  OUT.Color.a = vTex.a;

  return OUT;
}


//========================================================================

technique Imposter
{
  pass p0
  {
    VertexShader = ImposterVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
    
    PixelShader = ImposterPS();
  }
}

technique ImposterPostProcess
{
  pass p0
  {
    VertexShader = ImposterPostVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
    
    PixelShader = ImposterPostPS();
  }
}

technique Cloud
<
  string Script = "Public;";
>
{
  pass p0
  {
    VertexShader = TransformCloudVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
    
    PixelShader = CloudPS();
  }
}

technique Cloud_Recursive
{
  pass p0
  {
    VertexShader = TransformImposterVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
    
    PixelShader = Cloud_RecursivePS() CloudPS;
  }
}

technique Cloud_Imposter
{
  pass p0
  {
    VertexShader = TransformImposterVS();
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
       
    PixelShader = CloudImposterPS() CloudPS;
  }
}

technique Cloud_ScreenImposter
{
  pass p0
  {
    VertexShader = TransformCSImposterVS() CloudVS;
    
    ZEnable = true;
    ZWriteEnable = true;
    CullMode = None;
   
    PixelShader = CloudScreenImposterPS() CloudPS;
  }
}

technique Clear
{
  pass p0
  {
    VertexShader = ClearVS();
    PixelShader  = ClearPS();
  }
}

technique ClearUniform
{
  pass p0
  {
    VertexShader = TransformedClearVS();
    
    ZEnable = false;
    CullMode = None;
       
    PixelShader = ClearUniformPS();
  }
}

/////////////////////// eof ///

