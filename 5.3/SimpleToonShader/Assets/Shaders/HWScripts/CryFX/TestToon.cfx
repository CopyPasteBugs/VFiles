// CRYENGINE Source Code File
// Copyright 2001-2015 Crytek GmbH. All rights reserved.
 
#include "Common.cfi"
#include "ShadeLib.cfi"
#include "vertexLib.cfi"

///////////////////////////////
// Samplers

Texture2D rampTex : register(t9)
<
  UIName = "Ramp Map";
  UIDescription = "Ramp Map";
> = TM_Custom;

half4 MP_SpecColor // !MP means material parameter
<
  register = REG_PM_PARAM_3;
  string UIHelp = "Color of spec on model";                   
  string UIName = "Spec Color";    
  string UIWidget = "color";
> = {1.0, 1.0, 1.0, 1.0};

half4 MP_OutlineColor
<
  register = REG_PM_PARAM_4;
  string UIHelp = "Color of outline on model";                   
  string UIName = "outline Color";    
  string UIWidget = "color";
> = {0.0, 0.0, 0.0, 1.0};

float MP_FresnelScale
<
  register = REG_PM_PARAM_2.x;
  string UIHelp = "Set Fresnel scale";                     
  string UIName = "Fresnel scale";    	  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1000.0;
  float UIStep = 10;
> = 1000.0;

half MP_FresnelOffset
<
  register = REG_PM_PARAM_2.y;
  string UIHelp = "Set Fresnel offset";                     
  string UIName = "Fresnel offset";    	  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.05;
> = 0.1;

half MP_OutlineWidth
<
  register = REG_PM_PARAM_2.z;
  string UIHelp = "Set width for outline ";                     
  string UIName = "Outline Width";    	  
  string UIWidget = "slider";
  float UIMin = 0.0;
  float UIMax = 1.0;
  float UIStep = 0.01;
> = 0.2;


float Script : STANDARDSGLOBAL
<
  string Script =        
                "Public;"
                "ShaderType = General;"
                "ShaderDrawType = General;"
                "AfterHDRPostProcess;"
                "ForceDrawLast;"
>;
 
half4 AmbientOpPB        : PB_AmbientOpacity;
float3x4 ObjWorldMatrix : SI_ObjMatrix        < vsregister = c0; >;

vert2FragGeneral
TestVS( app2vertGeneral IN, 
        out float3  normalWS : TEXCOORDN,
        out float3 eyeDir : TEXCOORD10,
        out float3 lightDir : TEXCOORD11)
{
  vert2FragGeneral OUT = (vert2FragGeneral) 0;
 
  streamPos vertPassPos = (streamPos)0;
  vs_shared_output(IN, OUT, vertPassPos, false);
  
  float3 normal = normalize(cross(vertPassPos.Binormal, vertPassPos.Tangent)); // F...where is normal in vertex %) ..restore from TB???  
  //normalWS = normalize(mul((const float3x3)vertPassPos.InstMatrix, normal));  // I guess this is wrong matrix for using in this case
  normalWS = normalize(mul((const float3x3)ObjWorldMatrix, normal));            // Yeah!
  
  //float3 posWP = mul(vertPassPos.InstMatrix, vertPassPos.Position).xyz;       // still wrong mat 
  float3 posWP = mul(ObjWorldMatrix, vertPassPos.Position).xyz;                 // obj vertex into world vertex
  
  eyeDir = normalize(g_VS_WorldViewPos - posWP);                                // so normalized direction from we look on obj
  lightDir = normalize(g_VS_SunLightDir);                                       // guess that g_VS_SunLightDir  = normalized(LightPos - Position)
  
  return OUT;
}

// за основу взят этот пример: https://www.gamedev.net/forums/topic/566320-hlsl-cel-toon-shader-in-xna/

float4
TestPS( in vert2FragGeneral IN, 
        float3 normalWS : TEXCOORDN,
        float3 eyeDir : TEXCOORDN10,
        float3 lightDir : TEXCOORD11 ) : COLOR
{
  float4 cColor = GetDiffuseTex( diffuseTex, IN.baseTC );
  
  //float diffuse = clamp(dot(normalWS, g_PS_SunLightDir) * 0.5 + 0.5, 0, 1.0); // clamp
  float diffuse = dot(normalWS, g_PS_SunLightDir) * 0.5 + 0.5; // Map value from [-1, 1] to [0, 1]
  float4 lightColor = GetCustomTex(rampTex, diffuse);
  
  
  float NdotE = dot(normalWS, eyeDir); 
  float NdotL = dot(normalWS, g_PS_SunLightDir);
  
  float fresnal = NdotE;
  fresnal = clamp((fresnal - MP_FresnelOffset) * MP_FresnelScale, 0.0, 1.0);
  lightColor *= fresnal;
  
  float3 reflect = (2.0 * diffuse * normalWS) - g_PS_SunLightDir;
  float specular = pow(clamp(dot(reflect, eyeDir), 0.0, 1.0), 8.0);
  specular = clamp((specular - 0.5) * 1000.0, 0.0, 1.0);

  float4 specular4 = specular * MP_SpecColor * NdotL;
  
  // контур
  if (NdotE <= MP_OutlineWidth) // width of outline
    cColor = MP_OutlineColor; //красный
  else
    cColor = saturate(lightColor * cColor + specular4);
 
    
  //cColor.rgb = pow(cColor.rgb, 1.0 / 2.2 );
  //cColor.w *= AmbientOpPB.w; 
 
  return cColor;
}
 
technique General
{
  pass p0
  {    
    VertexShader = TestVS();
    PixelShader = TestPS();
  }
}